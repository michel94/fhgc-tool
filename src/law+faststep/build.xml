<?xml version="1.0"?>

<!--

	If local is defined (e.g., -Dlocal=) Javadoc documentation
	will be linked to the local versions in ${javadoc.base} that
	is taken from the environment varabile $JAVADOC_HOME, if set,
	or defaults to /usr/share/javadoc

	If testonly is defined, junit will run only on that package.

-->

<project name="law" default="jar" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- === using ivy to setup the classpath === [ -->

	<property name="build.sysclasspath" value="ignore"/>
	<property name="jars.dir" value="${basedir}/jars"/>

	<property environment="env"/>
	<condition property="ivy.settings.file" value="${env.LOCAL_IVY_SETTINGS}"><isset property="env.LOCAL_IVY_SETTINGS"/></condition>

	<target name="ivy-setupjars" description="Downloads dependencies with ivy and generate report">
		<ivy:retrieve symlink="true" sync="true" pattern="${jars.dir}/[conf]/[artifact](-[classifier]).[ext]"/>
	</target>

	<target name="ivy-clean" description="Clean ivy cache, jars dir and ivy installation">
		<!-- this is very aggressive <ivy:cleancache /> -->
		<delete dir="${jars.dir}"/>
	</target>

	<target name="ivy-report" depends='ivy-setupjars' description="Compute the resolution report (saving it in ${reports}/ivy)">
		<ivy:report todir="${reports}/ivy"/>
	</target>

	<path id="compile.classpath">
		<fileset dir="${jars.dir}/compile" erroronmissingdir="false"/>
	</path>
	<path id="test.classpath">
		<fileset dir="${jars.dir}/test" erroronmissingdir="false"/>
	</path>
	<path id="project.classpath">
		<fileset dir="${jars.dir}/runtime" erroronmissingdir="false"/>
	</path>

	<!-- ] === using ivy to setup the classpath === -->

	<!-- === defining ivy and jacoco tasks === [ -->

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" onerror="report"/>
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="test.classpath" onerror="report"/>

	<!-- ] === defining ivy and jacoco tasks === -->

	<!-- === getting additional properties from file, fixing references for local/remote javadoc === [ -->

	<property file="build.properties"/>

	<property name="jarfile" value="law-${version}.jar"/>

	<!-- ] === getting additional properties from file, fixing references for local/remote javadoc === -->

	<!-- === manual dependencies === [ -->

	<condition property="requires-javacc">
		<available file="${src}/it/unimi/dsi/law/warc/filters/parser/FilterParser.jj" type="file"/>
    </condition>

	<!-- ] === manual dependencies === -->

	<!-- ============= Generic targets. ============ -->

	<target name="all" depends="jar,javadoc"/>

	<target name="init">
		<available property="ivy.set.up" file="${jars.dir}"/>
		<fail message="It appears that Ivy has not been set up properly. Please run &quot;ant ivy-setupjars&quot; and try again." unless="ivy.set.up"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
		<mkdir dir="${docs}"/>
		<mkdir dir="${docs}/it/unimi/dsi/law/warc/filters/parser/"/>
		<mkdir dir="${outcomes}"/>
		<mkdir dir="${reports}"/>
	</target>

	<target name="clean">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete dir="${docs}"/>
		<delete dir="${outcomes}"/>
		<delete dir="${reports}"/>
		<delete>
			<fileset dir="." includes="law-*.jar"/>
			<fileset dir="${src}">
				<containsregexp expression="Generated By:JavaCC: Do not edit this line"/>
			</fileset>
		</delete>
	</target>

	<target name="compile" depends="init,javacc" description="Compile sources (without tests)">
		<javac srcdir="${src}" debug="on" optimize="on" destdir="${build}" encoding="UTF-8" source="1.7" classpathref="compile.classpath"/>
	</target>

	<target name="compile-tests" depends="init,javacc,compile" description="Compile sources (tests)">
		<javac srcdir="${src}:${test}" debug="on" optimize="on" destdir="${build}" encoding="UTF-8" source="1.7" classpathref="test.classpath"/>
	</target>

	<target name="jar" depends="compile" description="Creates jar (without tests)">
		<jar basedir="${build}" jarfile="${jarfile}"/>
	</target>

	<target name="javadoc" description="Generates documentation" depends="init,javacc-docs">
		<javadoc destdir="${docs}"
					additionalparam="-Xdoclint:none"
					encoding="UTF-8"
					docencoding="UTF-8"
					classpathref="project.classpath"
					sourcepath="${src}"
					packagenames="it.unimi.dsi.law.*"
					protected="on"
					overview="${src}/overview.html"
					source="1.7"
					stylesheetfile="${src}/stylesheet.css"
					windowtitle="LAW ${version}">
			<link href="${j2se.apiurl}"/>
			<link href="${junit.apiurl}"/>
			<link href="${fastutil.apiurl}"/>
			<link href="${mg4j.apiurl}"/>
			<link href="${mg4j-big.apiurl}"/>
			<link href="${dsiutils.apiurl}"/>
			<link href="${sux4j.apiurl}"/>
			<link href="${slf4j.apiurl}"/>
			<link href="${webgraph.apiurl}"/>
			<link href="${webgraph-big.apiurl}"/>
			<link href="${commons-lang.apiurl}"/>
			<link href="${commons-io.apiurl}"/>
			<link href="${commons-collections.apiurl}"/>
			<link href="${commons-configuration.apiurl}"/>
			<link href="${jsap.apiurl}"/>
		</javadoc>
	</target>

	<!-- javacc stuff -->

	<target name="javacc" depends="init" if="requires-javacc">
			<javacc target="${src}/it/unimi/dsi/law/warc/filters/parser/FilterParser.jj" javacchome="${jars.dir}/compile"/>
	</target>

	<target name="javacc-docs" depends="init,javacc" if="requires-javacc">
			<jjdoc target="${src}/it/unimi/dsi/law/warc/filters/parser/FilterParser.jj" javacchome="${jars.dir}/compile"
		outputfile="${docs}/it/unimi/dsi/law/warc/filters/parser/FilterParser.doc.html"/>
	</target>

	<!-- junit / jacoco stuff -->

	<target name="-testony-present" if="testonly">
		<echo>Testing only package: ${testonly}</echo>
		<property name="testonlydir" value="it/unimi/dsi/law/${testonly}/**"/>
		<property name="coverage.output" value="jacoco-${testonly}.exec"/>
	</target>
	<target name="-testony-absent" unless="testonly">
		<echo>Testing all pagkages (specify -Dtestonly=X to restrict tests to the specific package it.unimi.dsi.law.X)</echo>
		<property name="testonlydir" value="**"/>
		<property name="coverage.output" value="jacoco-ALL.exec"/>
	</target>
	<target name="generate-outcomes" depends="init,-testony-present,-testony-absent,compile-tests" description="Runs JUnit tests">
		<jacoco:coverage destfile="${outcomes}/${coverage.output}">
		<junit fork="yes" forkmode="once" printsummary="true" outputtoformatters="false">
			<jvmarg value="-Xmx1G"/>
			<jvmarg value="-Dit.unimi.dsi.law.data=data"/>
			<assertions>
				<enable/>
			</assertions>
			<classpath>
				<path refid="test.classpath" />
					<pathelement location="${build}"/>
			</classpath>
			<formatter type="xml"/>
			<formatter type="plain"/>
			<batchtest todir="${outcomes}">
				<fileset dir="${test}">
					<containsregexp expression="@Test"/>
					<include name="${testonlydir}/*.java"/>
				</fileset>
			</batchtest>
		</junit>
		</jacoco:coverage>
	</target>
	<target name="merge-outcomes" depends="init" description="Merges junit and jacoco outcomes (used by Jenkins)">
		<delete file="${outcomes}/junit.xml"/>
		<junitreport tofile="${outcomes}/junit.xml">
			<fileset file="${outcomes}/TEST-*.xml"/>
		</junitreport>
		<jacoco:merge destfile="${outcomes}/jacoco.exec">
			<fileset dir="${outcomes}" includes="*-*.exec"/>
		</jacoco:merge>
	</target>
	<target name="reports" depends="init" description="Generate junit and jacoco html reports">
		<junitreport tofile="${outcomes}/junit.xml">
			<fileset file="${outcomes}/TEST-*.xml"/>
			<report todir="${reports}/junit"/>
		</junitreport>
		<jacoco:report>
			<executiondata>
				<file file="${outcomes}/jacoco.exec"/>
			</executiondata>
			<structure name="LAW Project">
				<classfiles>
            		<fileset dir="${build}"/>
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src}"/>
				</sourcefiles>
			</structure>
			<html destdir="${reports}/jacoco"/>
		</jacoco:report>
	</target>
	<target name="test" depends="generate-outcomes,merge-outcomes,reports" description="Runs JUnit tests"/>

	<!-- snapshot stuff -->

	<target name="snapshot" description="Publishes a snapshot version on jars.law.di.unimi.it" depends="jar">
		<move file="law-${version}.jar" tofile="${build}/law-library-${version}-SNAPSHOT.jar"/>
		<ivy:resolve/>
		<ivy:deliver deliverpattern="${build}/[artifact]-[revision].[ext]" pubrevision="${version}-SNAPSHOT" status="integration"/>
		<ivy:makepom ivyfile="${build}/ivy-${version}-SNAPSHOT.xml" pomfile="${build}/law-library-${version}-SNAPSHOT.pom">
			<dependency group="ch.qos.logback" artifact="logback-classic.jar" optional="true"/>
		</ivy:makepom>
		<ivy:publish resolver="law-snapshots" pubrevision="${version}-SNAPSHOT" overwrite="true" publishivy="false">
			<artifacts pattern="${build}/[artifact]-[revision].[ext]"/>
		</ivy:publish>
	</target>

</project>
